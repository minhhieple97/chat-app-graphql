# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Chatroom {
  createdAt: DateTime
  id: ID
  messages: [Message!]
  name: String
  updatedAt: DateTime
  users: [User!]
}

type CurrentUserResponse {
  message: String
  success: Boolean!
  user: User!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input LoginDto {
  email: String!
  password: String!
}

type LoginResponse {
  accessToken: String!
  message: String
  refreshToken: String
  success: Boolean!
}

type Message {
  chatroom: Chatroom
  content: String
  createdAt: DateTime
  id: ID
  imageUrl: String
  updatedAt: DateTime
  user: User
}

type Mutation {
  addUsersToChatroom(chatroomId: Float!, userIds: [Float!]!): Chatroom!
  createChatroom(name: String!): Chatroom!
  deleteChatroom(chatroomId: Float!): String!
  deleteUser: Boolean!
  login(loginInput: LoginDto!): LoginResponse!
  logout: String!
  refreshToken: RefreshTokenResponse!
  register(registerInput: RegisterDto!): RegisterResponse!
  sendMessage(chatroomId: Float!, content: String!, image: Upload): Message!
  updateAvatar(base64Image: String!): User!
  updateUser(input: UpdateUserInput!): User!
  userStartedTypingMutation(chatroomId: Float!): User!
  userStoppedTypingMutation(chatroomId: Float!): User!
}

type Query {
  getChatroomsForUser(userId: Float!): [Chatroom!]!
  getCurrentUser: CurrentUserResponse!
  getMessagesForChatroom(chatroomId: Float!): [Message!]!
  getUser: UserResponse!
  getUsersOfChatroom(chatroomId: Float!): [User!]!
  searchUsers(searchTerm: String!): UsersResponse!
}

type RefreshTokenResponse {
  accessToken: String!
}

input RegisterDto {
  email: String!
  fullname: String!
  password: String!
}

type RegisterResponse {
  accessToken: String!
  message: String
  refreshToken: String
  success: Boolean!
}

type Subscription {
  newMessage(chatroomId: Float!): Message
  userStartedTyping(chatroomId: Float!, userId: Float!): User
  userStoppedTyping(chatroomId: Float!, userId: Float!): User
}

input UpdateUserInput {
  avatarData: String
  email: String
  fullname: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  avatarUrl: String
  createdAt: DateTime!
  email: String!
  fullname: String!
  id: Float
  updatedAt: DateTime!
}

type UserResponse {
  message: String
  success: Boolean!
  user: User!
}

type UsersResponse {
  success: Boolean!
  total: Float!
  users: [User!]!
}